---
import { Fragment } from 'astro/internal'

const {
	'@is': tag = null,
	'@import:http': EXT_Source = null,
	'@import:key': EXT_SRI_KEY = null,
	shadowroot,
	...attrs
} = Astro.props as Props

/** Generates the HTML Tag for the Element */
const XElement: string = tag === null || tag === '#text' ? Fragment : tag

/** Formats the given value so that it can be placed into an attribute. */
const toAttributeString = (value: any) => String(value)

/** Listeners to attach onto the event. */
let listenerString:string = ''

/** Event fired once before the document is displayed, deferred using `type="module". */
let listenerOfOnce:string = ''

let importString:string

/** Parse the Attributes */
for (const name in attrs) {
	if (name.startsWith('@')) {
		const data = attrs[name]

		if (typeof data === 'function') {
			delete attrs[name]

			/** Normalized type of the event. */
			let type = name.slice(1)

			/** Options extracted from the type. */
			let opts: { [key: string]: boolean } = {}

			/** Values extracted from the type to populate Options. */
			let read: RegExpExecArray

			while ((read = /:\w+$/.exec(type))) {
				opts[type.slice(read.index + 1)] = true

				type = type.slice(0, read.index)
			}
			/** Apply the Hydration selectors*/
			switch (type) {
				case 'do':
					listenerOfOnce = `(${toAttributeString(data)})($,$$);`
					break

				case 'resize':
					listenerString += `new ResizeObserver((e,o)=>${
						opts.once
							? `!o.disconnect()&&`
						: ``
					}(${toAttributeString(data)})(e[0],$$)).observe($);`
					break

				case 'observe':
					listenerString += `new MutationObserver((e,o)=>${
						opts.once
							? `!o.disconnect()&&`
						: ``
					}(${toAttributeString(data)})(e[0])).observe($,${
						opts.all ?
								`attributes: true, childList: true, subtree: true, characterData: true`
						: opts.attr ?
							`attributes: true`
						: opts.children ?
							`childList: true`
						: opts.sub ?
							`subtree: true`
						: opts.data ?
							`characterData:true`
						: `attributes: true, childList: false, subtree: false, characterData: false`
						});`
					break

				case 'visible':
					listenerString += `new IntersectionObserver((e,o)=>e[0].isIntersecting${
						opts.once
							? `&&!o.disconnect()`
						: ``
					}&&(${toAttributeString(data)})(e[0],$$)).observe($);`
					break
				default:
					listenerString += `$.${opts.remove ? `removeEventListener` :  `addEventListener`}(${toAttributeString(JSON.stringify(type))},${`e=>{${opts.prevent ? `e.preventDefault();` : ''}(${toAttributeString(data)})(e,$$)},`
					}${
						opts.once
						? '{once:true}'
						: opts.useCapture
						? `{useCapture:true}`
						: ''
					});`
			}
		} else if (name.includes('@animate') && name.includes('@animateOptions')&& data && typeof data === 'object') {
			/** Applying Web Animate API to the Element */
			const [ keyFrames, options ] = [
				attrs['@animate'],
				attrs['@animateOptions']
			]
			delete attrs['@animate']
			delete attrs['@animateOptions']

			listenerString += `$.animate(${toAttributeString(JSON.stringify(keyFrames))},${toAttributeString(JSON.stringify({...options}))});`
		} else if(name.includes('@imports') && data){
			/** Import modules and external files into the Element */
			let buffer = []

			const importStatement = (name,src,importName,type=null) => `${name}=(await import("${src}"))${type === 'default' ?`.default` : `["${importName}"]`}`

			const importStatements = (statements) => `const ${statements.map(
  					statement => importStatement(statement.constName,statement.src, statement.importName, statement?.type )).join(',')};`
			const exportStatement = (name,type=null)=> `${name} ${type==='default' ?? `as default`},`
			const exportStatements = statements => `export {
				${exportStatement(statements.name,statements?.type)}
			}
			`
			
			for (let [names, path] of Object.entries(data)) {
				names.split(',').map(name=>{
					if (name.includes(':default')){
						let o = name.replace(':default','')
						return buffer.push({
							constName:o,
							importName:o,
							src: path,
							type:'default',
						})
					}else if(name.match(/[\w:\w]/)){
						let o = name.split(':')
						return buffer.push({
						constName:o[0],
						importName:o[1] ?? o[0],
						src: path,
					})
					}
					return buffer.push({
						constName:name,
						importName:name,
						src: path,
					})

				})
			}
			importString = importStatements(buffer)
			delete attrs['@imports']
		}
	}
}


const onLoadString: string = listenerString || listenerOfOnce ? `(async function($$,$){$=this;$$=(await import($$.src)).default;${importString ?? ''};const Fetch = window.fetch; ${
	listenerString
};${
	listenerOfOnce
}}).call(this.previousSibling,this.remove()||this)` :`(async function($$,$){$=this,$$=(await import($$.src)).default;${importString ?? ''}}).call(this.previousSibling,this.remove()||this)`

const Template = 'template'

---
<XElement {...attrs}>{
	shadowroot == null
		? <slot>&#8203;</slot>
	: <Template shadowroot="open"><slot>&#8203;</slot></Template>
	}</XElement>{
	onLoadString ? 
        <script 
			id={`${XElement}_script`}
            type="module" 
            src={EXT_Source ?? `data:text/javascript,export default new Object()`}
            integrity={EXT_SRI_KEY && EXT_Source ? EXT_SRI_KEY : null} 
            crossorigin={EXT_SRI_KEY ? 'anonymous' : null} 
            referrerpolicy={'origin'} 
            onload={onLoadString}></script> : null
}